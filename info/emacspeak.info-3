This is emacspeak.info, produced by makeinfo version 7.1 from
emacspeak.texi.

INFO-DIR-SECTION Accessibility
START-INFO-DIR-ENTRY
* Emacspeak:(emacspeak).		Speech-enabled Audio Desktop.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacspeak:(emacspeak).		Speech-enabled Audio Desktop.
END-INFO-DIR-ENTRY

This manual documents *Emacspeak, The Complete Audio Desktop* and was
last updated on January 12, 2024.



File: emacspeak.info,  Node: Emacspeak Keyboard Commands,  Next: TTS Servers,  Prev: Running Terminal Based Applications,  Up: Top

14 Emacspeak Keyboard Commands.
*******************************

This chapter gives an overview of all the keymaps used by Emacspeak.
For a complete reference, see *Note emacspeak::.  For basic usage, see
*Note Basic Usage::.

   Emacspeak uses the following keymaps, each of which are invoked by a
specific prefix key.
‘C-e’
     The main Emacspeak keymap.
‘C-e d’
     The text-to-speech keymap.
‘C-;’
     The Emacspeak hyper keymap.
‘C-'’
     The emacspeak super keymap.
‘C-,’
     The Emacspeak alt keymap.
‘C-.’
     The Emacspeak super keymap.
‘C-e x’
     The emacspeak ‘x’ keymap.
‘C-e C-x’
     The Emacspeak ‘C-x’ keymap.

   Primary Emacspeak commands start with ‘C-e’.  Following ‘C-e’ with
‘d’ invokes commands that control the text-to-speech engine.  Note that
silencing speech is an exception to this rule -- Speech silence commands
are placed directly on the primary emacspeak-keymap (‘C-e s’ and ‘C-e
.’).

   In addition, Emacspeak introduces five additional keymaps for binding
its extensive set of facilities to convenient keystrokes.

   When running under a windowing system, Emacs automatically receives
keys ‘C-;’, ‘C-'’, ‘C-,’ and ‘C-.’.  When running on the Linux console,
these keys become available after loading the custom Linux keymap found
in ‘emacspeak/tvr/console-keymaps’ after checking out the emacspeak
repository from <https://github.com/tvraman/emacspeak>.

   Emacspeak defines personal keymaps accessible via ‘C-e x’ and ‘C-e
C-x’.  For now, emacspeak does not bind any commands in keymap ‘C-e C-x’
-- this keymap is left for end-user personalization.

   Note that the information presented in the following subsections can
also be viewed via Emacs' built-in Help system; e.g., Press ‘C-; C-h’ to
get a ‘*Help*’ buffer that displays all keys bound in
‘emacspeak-hyper-keymap’.


File: emacspeak.info,  Node: TTS Servers,  Next: Emacspeak At Twenty,  Prev: Emacspeak Keyboard Commands,  Up: Top

15 TTS Servers
**************

Emacspeak produces spoken output by communicating with one of many
speech servers.  This section documents the communication protocol
between the client application i.e.  Emacspeak, and the TTS (Text to
Speech) server.  This section is primarily intended for developers
wishing to:

   • Create new speech servers that comply with this communication
     protocol

   • Developers of other client applications who wish to use the various
     Emacspeak speech servers.

   For additional notes on how to log and view TTS server commands when
developing a speech server, see
<http://emacspeak.blogspot.com/2015/04/howto-log-speech-server-output-to-aid.html>.

15.1 High-level Overview
========================

The TTS server reads commands from standard input, and script
_speech-server_ can be used to cause a TTS server to communicate via a
TCP socket.  Speech server commands are used by the client application
to make specific requests of the server; the server listens for these
requests in a non-blocking read loop and executes requests as they
become available.  Requests can be classified as follows:

   • Commands that send text to be spoken.

   • Commands that set _state_ of the TTS server.

   All commands are of the form

     commandWord {arguments}

   The braces are optional if the command argument contains no white
space.  The speech server maintains a _current state_ that determines
various characteristics of spoken output such as speech rate,
punctuations mode etc.  (see set of commands that manipulate speech
state for complete list).  The client application _queues_ The text and
non-speech audio output to be produced before asking the server to
_dispatch_ the set of queued requests, i.e.  start producing output.

   Once the server has been asked to produce output, it removes items
from the front of the queue, sends the requisite commands to the
underlying TTS engine, and waits for the engine to acknowledge that the
request has been completely processed.  This is a non-blocking
operation, i.e., if the client application generates additional
requests, these are processed _immediately_.

   The above design allows the Emacspeak TTS server to be _highly_
responsive; Client applications can queue large amounts of text
(typically queued a clause at a time to achieve the best prosody), ask
the TTS server to start speaking, and interrupt the spoken output at any
time.

15.1.1 Commands That Queue Output.
----------------------------------

This section documents commands that either produce spoken output, or
queue output to be produced on demand.  Commands that place the request
on the queue are clearly marked.

     version

   Speaks the _version_ of the TTS engine.  Produces output immediately.

     tts_say text

   Speaks the specified _text_ immediately.  The text is not
pre-processed in any way, contrast this with the primary way of speaking
text which is to queue text before asking the server to process the
queue.

   Note that this command needs to handle the special syntax for
morpheme boundaries ‘[*]’.  The ‘[*]’ syntax is specific to the Dectalk
family of synthesizers; servers for other TTS engines need to map this
pattern to the engine-specific code for each engine.  As an example, see
‘servers/outloud’ A morpheme boundary results in synthesizing compound
words such as _left bracket_ with the right intonation; using a space
would result in that phrase being synthesized as two separate words.

     l c

   Speak _c_ a single character, as a letter.  The character is spoken
immediately.  This command uses the TTS engine's capability to speak a
single character with the ability to flush speech _immediately_.  Client
applications wishing to produce character-at-a-time output, e.g., when
providing character echo during keyboard input should use this command.

     d

   This command is used to _dispatch_ all queued requests.  It was
renamed to a single character command (like many of the commonly used
TTS server commands) to work more effectively over slow (9600) dialup
lines.  The effect of calling this command is for the TTS server to
start processing items that have been queued via earlier requests.

     s

   Stop speech _immediately_.  Spoken output is interrupted, and all
pending requests are flushed from the queue.

     q text

   Queues text to be spoken.  No spoken output is produced until a
_dispatch_ request is received via execution of command _d_.

     c codes

   Queues synthesis codes to be sent to the TTS engine.  Codes are sent
to the engine with no further transformation or processing.  The codes
are inserted into the output queue and will be dispatched to the TTS
engine at the appropriate point in the output stream.

     a filename

   Cues the audio file identified by filename for playing.

     t freq length

   Queues a tone to be played at the specified frequency and having the
specified length.  Frequency is specified in hertz and length is
specified in milliseconds.

     sh duration

   Queues the specified duration of silence.  Silence is specified in
milliseconds.

15.1.2 Commands That Set State
------------------------------

     tts_reset

   Reset TTS engine to default settings.

     tts_set_punctuations mode

   Sets TTS engine to the specified punctuation mode.  Typically, TTS
servers provide at least three modes:

   • None: Do not speak punctuation characters.

   • Some: Speak some punctuation characters.  Used for English prose.

   • All: Speak out _all_ punctuation characters; useful in programming
     modes.

     tts_set_speech_rate rate

   Sets speech rate.  The interpretation of this value is typically
engine specific.

     tts_set_character_scale factor

   Scale factor applied to speech rate when speaking individual
characters.Thus, setting speech rate to 500 and character scale to 1.2
will cause command _l_ to use a speech rate of _500 * 1.2 = 600_.

     tts_split_caps flag

   Set state of _split caps_ processing.  Turn this on to speak
mixed-case (AKA Camel Case) identifiers.


File: emacspeak.info,  Node: Emacspeak At Twenty,  Next: Acknowledgments,  Prev: TTS Servers,  Up: Top

16 Emacspeak At Twenty.
***********************

This article was originally published to mark the 20th anniversary of
Emacspeak.  It has been incorporated as the final chapter of the
Emacspeak manual for easy reference.  The original article is available
on the Web and in its original source form as an *org* file in the
emacspeak distribution.
* Menu:

* Turning Twenty::
* Using UNIX With Speech Output  --   1994: Using UNIX With Speech Output  ---  1994.
* Key Enabler  ---  Emacs And Lisp Advice::
* Key Component  --   Text To Speech (TTS): Key Component  ---  Text To Speech (TTS).
* Emacspeak And Software Development::
* Emacspeak And Authoring Documents::
* Emacspeak And The Early Days Of The Web::
* Audio Formatting  --   Generalizing Aural CSS: Audio Formatting  ---  Generalizing Aural CSS.
* Conversational Gestures For The Audio Desktop::
* Accessing Media Streams::
* EBooks --    Ubiquitous Access To Books: EBooks ---  Ubiquitous Access To Books.
* Leveraging Computational Tools  --   From SQL And R To IPython Notebooks: Leveraging Computational Tools  ---  From SQL And R To IPython Notebooks.
* Social Web   --  EMail, Instant Messaging, Blogging  And Tweeting Using Open Protocols: Social Web  ---  EMail Instant Messaging Blogging And Tweeting Using Open Protocols.
* The RESTful Web  --   Web Wizards And URL Templates For Faster Access: The RESTful Web  ---  Web Wizards And URL Templates For Faster Access.
* Mashing It Up  --   Leveraging Evolving Web APIs: Mashing It Up  --- Leveraging Evolving Web APIs.
* Conclusion --- Turning Twenty::
* References::


File: emacspeak.info,  Node: Turning Twenty,  Next: Using UNIX With Speech Output --- 1994,  Up: Emacspeak At Twenty

16.1 Turning Twenty
===================

One afternoon in the third week of September 1994, I started writing
myself a small Emacs extension using Lisp Advice to make Emacs speak to
me so I could use a Linux laptop.  As Emacspeak turns twenty, this
article is both a quick look back over the twenty years of lessons
learned, as well as a glimpse into what might be possible as we evolve
to a world of connected, ubiquitous computing.  This article draws on
Learning To Program In 10 Years (http://norvig.com/21-days.html) by
Peter Norvig for some of its inspiration.


File: emacspeak.info,  Node: Using UNIX With Speech Output --- 1994,  Next: Key Enabler --- Emacs And Lisp Advice,  Prev: Turning Twenty,  Up: Emacspeak At Twenty

16.2 Using UNIX With Speech Output -- 1994
==========================================

As a graduate student at Cornell
(http://www.cs.cornell.edu/info/people/raman/raman.html), I accessed my
Unix workstation (SunOS) from an Intel 486 PC running IBM Screen-Reader.
There was no means of directly using a UNIX box at the time; after
graduating, I continued doing the same for about six months at Digital
Research in Cambridge -- the only difference being that my desktop
workstation was now a DEC-Alpha.  Throughout this time, Emacs was my
environment of choice for everything from software development and
Internet access to writing documents.

   In fall of 1994, I wanted to start using a laptop running Linux; a
colleague (Dave Wecker) was retiring his 386mhz laptop that already had
Linux on it and I decided to inherit it.  But there was only one problem
-- until then I had always accessed a UNIX machine from a secondary PC
running a screen-reader -- something that would clearly make no sense
with a laptop!

   Another colleague, Win Treese, had pointed out the interesting
possibilities presented by package *advice* in Emacs 19.23 -- a few
weeks earlier, he had sent around a small snippet of code that magically
modified Emacs' version-control primitive to first create an _RCS_
directory if none existed before adding a file to version control.  When
I speculated about using the Linux laptop, Dave remarked -- you live in
Emacs anyway -- why dont you just make it talk!

   Connecting the dots, I decided to write myself a tool that augmented
Emacs' default behavior to _speak_ -- within about 4 hours, version 0.01
of Emacspeak was up and running.


File: emacspeak.info,  Node: Key Enabler --- Emacs And Lisp Advice,  Next: Key Component --- Text To Speech (TTS),  Prev: Using UNIX With Speech Output --- 1994,  Up: Emacspeak At Twenty

16.3 Key Enabler -- Emacs And Lisp Advice
=========================================

It took me a couple of weeks to fully recognize the potential of what I
had built with Emacs Lisp Advice.  Until then, I had used screen-readers
to listen to the contents of the visual display -- but Lisp Advice let
me do a lot more -- it enabled Emacspeak to generate highly
context-specific spoken feedback, augmented by a set of auditory icons.
I later formalized this design under the name speech-enabled
applications (http://en.wikipedia.org/wiki/Self-voicing).  For a
detailed overview of the architecture of Emacspeak, see the chapter on
Emacspeak
(http://emacspeak.sourceforge.net/raman/publications/bc-emacspeak/publish-emacspeak-bc.html)
in the book Beautiful Code
(http://emacspeak.blogspot.com/2007/07/emacspeak-and-beautiful-code.html)
from O'Reilly.


File: emacspeak.info,  Node: Key Component --- Text To Speech (TTS),  Next: Emacspeak And Software Development,  Prev: Key Enabler --- Emacs And Lisp Advice,  Up: Emacspeak At Twenty

16.4 Key Component -- Text To Speech (TTS)
==========================================

Emacspeak is a speech-subsystem for Emacs; it depends on an external
Text-To-Speech (TTS) engine to produce speech.  In 1994, Digital
Equipment released what would turn out to be the last in the line of
hardware DECTalk synthesizers, the DECTalk Express.  This was
essentially an Intel 386with 1mb of flash memory that ran a version of
the DECTalk TTS software -- to date, it still remains my favorite
Text-To-Speech engine.  At the time, I also had a software version of
the same engine running on my DEC-Alpha workstation; the desire to use
either a software or hardware solution to produce speech output defined
the Emacspeak speech-server architecture.

   I went to IBM Research in 1999; this coincided with IBM releasing a
version of the Eloquennce TTS engine on Linux under the name _ViaVoice
Outloud_.  My colleague Jeffrey Sorenson implemented an early version of
the Emacspeak speech-server for this engine using the OSS API; I later
updated it to use the ALSA library while on a flight back to SFO from
Boston in 2001.  That is still the TTS engine that is speaking as I type
this article on my laptop.

   20 years on, TTS continues to be the weakest link on Linux; the best
available solution in terms of quality continues to be the Linux port of
Eloquence TTS available from Voxin in Europe for a small price.  Looking
back across 20 years, the state of TTS on Linux in particular and across
all platforms in general continues to be a disappointment; most of
today's newer TTS engines are geared toward mainstream use-cases where
_naturalness_ of the voice tends to supersede intelligibility at higher
speech-rates.  Ironically, modern TTS engines also give applications far
less control over the generated output -- as a case in point, I
implemented Audio System For Technical Readings (AsTeR)
(http://www.cs.cornell.edu/home/raman/aster/demo.html) in 1994 using the
DECTalk; 20 years later, we implemented MathML support
(http://allthingsd.com/20130604/t-v-ramans-audio-deja-vu-from-google-a-math-reading-system-for-the-web/)
in ChromeVox (http://www.chromevox.com/) using Google TTS. In 2013, it
turned out to be difficult or impossible to implement the type of audio
renderings that were possible with the admittedly less-natural sounding
DECTalk!


File: emacspeak.info,  Node: Emacspeak And Software Development,  Next: Emacspeak And Authoring Documents,  Prev: Key Component --- Text To Speech (TTS),  Up: Emacspeak At Twenty

16.5 Emacspeak And Software Development
=======================================

Version 0.01 of Emacspeak was written using IBM Screen-Reader on a PC
with a terminal emulator accessing a UNIX workstation.  But in about 2
weeks, Emacspeak was already a better environment for developing
Emacspeak in particular and software development in general.  Here are a
few highlights in 1994 that made Emacspeak a good software development
environment, present-day users of Emacspeak will see that that was just
scratching the surface.

   • Audio formatting using voice-lock to provide aural syntax
     highlighting.
   • Succinct auditory icons to provide efficient feedback.
   • Emacs' ability to navigate code structurally --
   as opposed to moving around by plain-text units such as characters,
lines and words.  S-Expressions are a major win!
   • Emacs' ability to specialize behavior based on major and minor
     modes.
   • Ability to browse program code using tags, and getting fluent
     spoken feedback.
   • Completion *everywhere*.
   • Everything is searchable -- this is a huge win when you cannot see
     the screen.
   • Interactive spell-checking using ISpell with continuous spoken
     feedback augmented by aural highlights.
   • Running code compilation and being able to jump to errors with
     spoken feedback.
   • Ability to move through diff chunks when working with source code
     and source control systems; refined diffs as provided by the
     *ediff* package when speech-enabled is a major productivity win.
   • Ability to easily move between email, document authoring and
     programming -- though this may appear trivial, it continues to be
     one of Emacs' biggest wins.

   Long-term Emacs users will recognize all of the above as being among
the reasons why they do most things inside Emacs -- there is little that
is Emacspeak specific in the above list -- except that Emacspeak was
able to provide fluent, well-integrated contextual feedback for all of
these tasks.  And that was a game-changer given what I had had before
Emacspeak.  As a case in point, I did not dare program in Python before
I speech-enabled Emacs' Python-Mode; the fact that white space is
significant in Python made it difficult to program using a plain
screen-reader that was unaware of the semantics of the underlying
content being accessed.

* Menu:

* Programming Defensively::


File: emacspeak.info,  Node: Programming Defensively,  Up: Emacspeak And Software Development

16.5.1 Programming Defensively
------------------------------

As an aside, note that all of Emacspeak has been developed over the last
20 years with Emacspeak being the only adaptive technology on my system.
This has led to some interesting design consequences, primary among them
being a strong education in *programming defensively*.  Here are some
other key features of the Emacspeak code-base:

  1. The code-base is extremely *bushy* rather than deeply hierarchical
     -- this means that when a module breaks, it does not affect the
     rest of the system.
  2. Separation of concerns with respect to the various layers, a
     tightly knit core speech library interfaces with any one of many
     speech servers running as an external process.
  3. Audio formatting is abstracted by using the formalism defined in
     Aural CSS.
  4. Emacspeak integrates with Emacs' user interface conventions by
     taking over a single prefix key *C-e* with _all_ Emacspeak commands
     accessed through that single keymap.  This helps embedding
     Emacspeak functionality into a large variety of third party modules
     without any loss of functionality.


File: emacspeak.info,  Node: Emacspeak And Authoring Documents,  Next: Emacspeak And The Early Days Of The Web,  Prev: Emacspeak And Software Development,  Up: Emacspeak At Twenty

16.6 Emacspeak And Authoring Documents
======================================

In 1994, my preferred environment for authoring *all* documents was
*LaTeX* using the Auctex package.  Later I started writing either LaTeX
or HTML using the appropriate support modes; today I use *org-mode* to
do most of my content authoring.  Personally, I have never been a fan of
What You See Is What You Get (WYSIWYG) authoring tools -- in my
experience that places an undue burden on the author by drawing
attention away from the content to focus on the final appearance.  An
added benefit of creating content in Emacs in the form of light-weight
markup is that the content is long-lived -- I can still usefully process
and re-use things I have written 25 years ago.

   Emacs, with Emacspeak providing audio formatting and context-specific
feedback remains my environment of choice for writing all forms of
content ranging from simple email messages to polished documents for
print publishing.  And it is worth repeating that I *never* need to
focus on what the content is going to look like -- that job is best left
to the computer.

   As an example of producing high-fidelity visual content, see this
write-up on Polyhedral Geometry
(http://emacspeak.sourceforge.net/raman/publications/polyhedra/) that I
published in 2002; all of the content, including the drawings were
created by me using Emacs.


File: emacspeak.info,  Node: Emacspeak And The Early Days Of The Web,  Next: Audio Formatting --- Generalizing Aural CSS,  Prev: Emacspeak And Authoring Documents,  Up: Emacspeak At Twenty

16.7 Emacspeak And The Early Days Of The Web
============================================

Right around the time that I was writing version 0.01 of emacspeak, a
far more significant software movement was under way -- the World Wide
Web was moving from the realms of academia to the mainstream world with
the launch of NCSA Mosaic -- and in late 1994 by the first commercial
Web browser in Netscape Navigator.  Emacs had always enabled integrated
access to FTP archives via package _ange-ftp_; in late 1993, William
Perry released Emacs-W3, a Web browser for Emacs written entirely in
Emacs Lisp.  W3 was one of the first large packages to be speech-enabled
by Emacspeak -- later it was the browser on which I implemented the
first draft of the Aural CSS specification
(http://www.w3.org/TR/CSS2/aural.html).  Emacs-W3 enabled many early
innovations in the context of providing non-visual access to Web
content, including audio formatting and structured content navigation;
in summer of 1995, Dave Raggett and I outlined a few extensions to HTML
Forms, including the *label* element as a means of associating metadata
with interactive form controls in HTML, and many of these ideas were
prototyped in Emacs-W3 at the time.  Over the years, Emacs-W3 fell
behind the times -- especially as the Web moved away from cleanly
structured HTML to a massive soup of unmatched tags.  This made parsing
and error-correcting badly-formed HTML markup expensive to do in
Emacs-Lisp -- and performance suffered.  To add to this, mainstream
users moved away because Emacs' rendering engine at the time was not
rich enough to provide the type of visual renderings that users had come
to expect.  The advent of DHTML, and JavaScript based Web Applications
finally killed off Emacs-W3 as far as most Emacs users were concerned.

   But Emacs-W3 went through a revival on the emacspeak audio desktop in
late 1999 with the arrival of XSLT, and Daniel Veillard's excellent
implementation via the *libxml2* and *libxslt* packages.  With these in
hand, Emacspeak was able to hand-off the bulk of HTML error correction
to the *xsltproc* tool.  The lack of visual fidelity didn't matter much
for an eyes-free environment; so Emacs-W3 continued to be a useful tool
for consuming large amounts of Web content that did not require
JavaScript support.

   During the last 24 months, *libxml2* has been built into Emacs; this
means that you can now parse arbitrary HTML as found in the wild without
incurring a performance hit.  This functionality was leveraged first by
package *shr* (Simple HTML Renderer) within the *gnus* package for
rendering HTML email.  Later, the author of *gnus* and *shr* created a
new light-weight HTML viewer called *eww* that is now part of Emacs 24.
With improved support for variable pitch fonts and image embedding,
Emacs is once again able to provide visual renderings for a large
proportion of text-heavy Web content where it becomes useful for
mainstream Emacs users to view at least some Web content within Emacs;
during the last year, I have added support within emacspeak to extend
package *eww*
(http://emacspeak.blogspot.com/2014/05/emacspeak-eww-updates-for-complete.html)
with support for DOM filtering and quick content navigation.


File: emacspeak.info,  Node: Audio Formatting --- Generalizing Aural CSS,  Next: Conversational Gestures For The Audio Desktop,  Prev: Emacspeak And The Early Days Of The Web,  Up: Emacspeak At Twenty

16.8 Audio Formatting -- Generalizing Aural CSS
===============================================

A key idea in Audio System For Technical Readings (AsTeR)
(http://www.cs.cornell.edu/home/raman/aster/aster-toplevel.html) was the
use of various voice properties in combination with non-speech auditory
icons to create rich aural renderings.  When I implemented Emacspeak, I
brought over the notion of audio formatting to all buffers in Emacs by
creating a *voice-lock* module that paralleled Emacs' *font-lock*
module.  The visual medium is far richer in terms of available fonts and
colors as compared to voice parameters available on TTS engines --
consequently, it did not make sense to directly map Emacs' *face*
properties to voice parameters.  To aid in projecting visual formatting
onto auditory space, I created property *personality* analogous to
Emacs' *face* property that could be applied to content displayed in
Emacs; module *voice-lock* applied that property appropriately, and the
Emacspeak core handled the details of mapping personality values to the
underlying TTS engine.

   The values used in property *personality* were abstract, i.e., they
were independent of any given speech engine.  Later in the fall of 1995,
I re-expressed these set of abstract voice properties in terms of Aural
CSS; the work was published as a first draft toward the end of 1995, and
implemented in Emacs-W3 in early 1996.  Aural CSS was an appendix in the
CSS-1.0 specification; later, it graduated to being its own module
within CSS-2.0.

   Later in 1996, all of Emacs' *voice-lock* functionality was
re-implemented in terms of Aural CSS; the implementation has stood the
test of time in that as I added support for more TTS engines, I was able
to implement engine-specific mappings of Aural-CSS values.  This meant
that the rest of Emacspeak could define various types of voices for use
in specific contexts without having to worry about individual TTS
engines.  Conceptually, property *personality* can be thought of as
holding an *aural display list* -- various parts of the system can
annotate pieces of text with relevant properties that finally get
rendered in the aggregate.  This model also works well with the notion
of Emacs overlays where a moving overlay is used to temporarily
highlight text that has other context-specific properties applied to it.

   Audio formatting as implemented in Emacspeak is extremely effective
when working with all types of content ranging from richly structured
mark-up documents (LaTeX, org-mode) and formatted Web pages to program
source code.  Perceptually, switching to audio formatted output feels
like switching from a black-and-white monitor to a rich color display.
Today, Emacspeak's audio formatted output is the only way I can
correctly write *else if* vs *elsif* in various programming languages!


File: emacspeak.info,  Node: Conversational Gestures For The Audio Desktop,  Next: Accessing Media Streams,  Prev: Audio Formatting --- Generalizing Aural CSS,  Up: Emacspeak At Twenty

16.9 Conversational Gestures For The Audio Desktop
==================================================

By 1996, Emacspeak was the only piece of adaptive technology I used; in
fall of 1995, I had moved to Adobe Systems from DEC Research to focus on
enhancing the Portable Document Format (PDF) to make PDF content
repurposable.  Between 1996 and 1998, I was primarily focused on
electronic document formats -- I took this opportunity to step back and
evaluate what I had built as an auditory interface within Emacspeak.
This retrospect proved extremely useful in gaining a sense of
perspective and led to formalizing the high-level concept of
_Conversational Gestures_ and structured browsing/searching as a means
of thinking about user interfaces.

   By now, Emacspeak was a complete environment -- I formalized what it
provided under the moniker _Complete Audio Desktop_.  The fully
integrated user experience allowed me to move forward with respect to
defining interaction models that were highly optimized to eyes-free
interaction -- as an example, see how Emacspeak interfaces with modes
like *dired* (Directory Editor) for browsing and manipulating the
filesystem, or *proced* (Process Editor) for browsing and manipulating
running processes.  Emacs' integration with *ispell* for spell checking,
as well as its various completion facilities ranging from minibuffer
completion to other forms of dynamic completion while typing text
provided more opportunities for creating innovative forms of eyes-free
interaction.  With respect to what had gone before (and is still par for
the course as far as traditional screen-readers are concerned), these
types of highly dynamic interfaces present a challenge.  For example,
consider handling a completion interface using a screen-reader that is
speaking the visual display.  There is a significant challenge in
deciding _what to speak_ e.g., when presented with a list of
completions, the currently typed text, and the default completion, which
of these should you speak, and in what order?  The problem gets harder
when you consider that the underlying semantics of these items is
generally not available from examining the visual presentation in a
consistent manner.  By having direct access to the underlying
information being presented, Emacspeak had a leg up with respect to
addressing the higher-level question -- when you do have access to this
information, how do you present it effectively in an eyes-free
environment?  For this and many other cases of dynamic interaction, a
combination of audio formatting, auditory icons, and the ability to
synthesize succinct messages from a combination of information items --
rather than having to forcibly speak each item as it is rendered
visually provided for highly efficient eyes-free interaction.

   This was also when I stepped back to build out Emacspeak's table
browsing facilities -- see the online Emacspeak documentation for
details on Emacspeak's table browsing functionality which continues to
remain one of the richest collection of end-user affordances for working
with two-dimensional data.

* Menu:

* Speech-Enabling Interactive Games::


File: emacspeak.info,  Node: Speech-Enabling Interactive Games,  Up: Conversational Gestures For The Audio Desktop

16.9.1 Speech-Enabling Interactive Games
----------------------------------------

So in 1997, I went the next step in asking -- given access to the
underlying information, is it possible to build effective eyes-free
interaction to highly interactive tasks?  I picked *Tetris* as a means
of exploring this space, the result was an Emacspeak extension to
speech-enable module *tetris.el*.  The details of what was learned were
published as a paper in Assets 98, and expanded as a chapter on
Conversational Gestures in my book on Auditory Interfaces; that book was
in a sense a culmination of stepping back and gaining a sense of
perspective of what I had build during this period.  The work on
Conversational Gestures also helped in formalizing the abstract user
interface layer that formed part of the XForms
(http://www.w3.org/MarkUp/Forms/) work at the W3C.

   Speech-enabling games for effective eyes-free interaction has proven
highly educational.  Interactive games are typically built to challenge
the user, and if the eyes-free interface is inefficient, you just won't
play the game -- contrast this with a task that you *must* perform,
where you're likely to make do with a sub-optimal interface.  Over the
years, Emacspeak has come to include eyes-free interfaces to several
games including Tetris (http://en.wikipedia.org/wiki/Tetris), Sudoku
(http://en.wikipedia.org/wiki/2048_(video_game)), and of late the
popular 2048 game (http://en.wikipedia.org/wiki/2048_(video_game)).
Each of these have in turn contributed to enhancing the interaction
model in Emacspeak, and those innovations typically make their way to
the rest of the environment.


File: emacspeak.info,  Node: Accessing Media Streams,  Next: EBooks --- Ubiquitous Access To Books,  Prev: Conversational Gestures For The Audio Desktop,  Up: Emacspeak At Twenty

16.10 Accessing Media Streams
=============================

Streaming real-time audio on the Internet became a reality with the
advent of RealAudio in 1995; soon there were a large number of media
streams available on the Internet ranging from music streams to live
radio stations.  But there was an interesting twist -- for the most
part, all of these media streams expected one to look at the screen,
even though the primary content was purely audio (streaming video hadn't
arrived yet!).  Starting in 1996, Emacspeak started including a variety
of eyes-free front-ends for accessing media streams.  Initially, this
was achieved by building a wrapper around *trplayer* -- a headless
version of RealPlayer; later I built Emacspeak module
*emacspeak-m-player* for interfacing with package *mplayer*.  A key
aspect of streaming media integration in emacspeak is that one can
launch and control streams without ever switching away from one's
primary task; thus, you can continue to type email or edit code while
seamlessly launching and controlling media streams.  Over the years,
Emacspeak has come to integrate with Emacs packages like *emms* as well
as providing wrappers for *mplayer* and *alsaplayer* -- collectively,
these let you efficiently launch all types of media streams, including
streaming video, without having to explicitly switch context.

   In the mid-90's, Emacspeak started including a directory of media
links to some of the more popular radio stations -- primarily as a means
of helping users getting started -- Emacs' ability to rapidly complete
directory and file-names turned out to be the most effective means of
quickly launching everything from streaming radio stations to audio
books.  And even better -- as the Emacs community develops better and
smarter ways of navigating the filesystem using completions, e.g.,
package *ido*, these types of actions become even more efficient!


File: emacspeak.info,  Node: EBooks --- Ubiquitous Access To Books,  Next: Leveraging Computational Tools --- From SQL And R To IPython Notebooks,  Prev: Accessing Media Streams,  Up: Emacspeak At Twenty

16.11 EBooks -- Ubiquitous Access To Books
==========================================

AsTeR -- was motivated by the increasing availability of technical
material as online electronic documents.  While AsTeR processed the TeX
family of markup languages, more general ebooks came in a wide range of
formats, ranging from plain text generated from various underlying file
formats to structured EBooks, with Project Gutenberg
(http://www.gutenberg.org/) leading the way.  During the mid-90's, I had
access to a wide range of electronic materials from sources such as
O'Reilly Publishing and various electronic journals -- The Perl Journal
(TPJ) is one that I still remember fondly.

   Emacspeak provided fairly light-weight but efficient access to all of
the electronic books I had on my local disk -- Emacs' strengths with
respect to browsing textual documents meant that I needed to build
little that was specific to Emacspeak.  The late 90's saw the arrival of
Daisy as an XML-based format for accessible electronic books.  The last
decade has seen the rapid convergence to *epub* as a distribution format
of choice for electronic books.  Emacspeak provides interaction modes
that make organizing, searching and reading these materials on the
Emacspeak Audio Desktop a pleasant experience.  Emacspeak also provides
an OCR-Mode -- this enables one to call out to an external OCR program
and read the content efficiently.

   The somewhat informal process used by publishers like O'Reilly to
make technical material available to users with print impairments was
later formalized by BookShare (https://www.bookshare.org/) -- today,
qualified users can obtain a large number of books and periodicals
initially as Daisy-3 and increasingly as *EPub*.  BookShare provides a
RESTful API for searching and downloading books; Emacspeak module
*emacspeak-bookshare* implements this API to create a client for
browsing the BookShare library, downloading and organizing books
locally, and an integrated ebook reading mode to round off the
experience.

   A useful complement to this suite of tools is the Calibre package for
organizing ones ebook collection; Emacspeak now implements an *EPub
Interaction* mode that leverages Calibre (actually sqlite3) to search
and browse books, along with an integrated *EPub mode* for reading
books.


File: emacspeak.info,  Node: Leveraging Computational Tools --- From SQL And R To IPython Notebooks,  Next: Social Web --- EMail Instant Messaging Blogging And Tweeting Using Open Protocols,  Prev: EBooks --- Ubiquitous Access To Books,  Up: Emacspeak At Twenty

16.12 Leveraging Computational Tools -- From SQL And R To IPython Notebooks
===========================================================================

The ability to invoke external processes and interface with them via a
simple read-eval-loop (REPL) is perhaps one of Emacs' strongest
extension points.  This means that a wide variety of computational tools
become immediately available for embedding within the Emacs environment
-- a facility that has been widely exploited by the Emacs community.
Over the years, Emacspeak has leveraged many of these facilities to
provide a well-integrated auditory interface.

   Starting from a tight code, eval, test form of iterative programming
as encouraged by Lisp.  Applied to languages like Python and Ruby to
exploratory computational tools such as R for data analysis and SQL for
database interaction, the Emacspeak Audio Desktop has come to encompass
a collection of rich computational tools that provide an efficient
eyes-free experience.

   In this context, module *ein* -- Emacs IPython Notebooks -- provides
another excellent example of an Emacs tool that helps interface
seamlessly with others in the technical domain.  IPython Notebooks
provide an easy means of reaching a large audience when publishing
technical material with interactive computational content; module *ein*
brings the power and convenience of Emacs ' editing facilities when
developing the content.  Speech-enabling package *ein* is a major win
since editing program source code in an eyes-free environment is far
smoother in Emacs than in a browser-based editor.


File: emacspeak.info,  Node: Social Web --- EMail Instant Messaging Blogging And Tweeting Using Open Protocols,  Next: The RESTful Web --- Web Wizards And URL Templates For Faster Access,  Prev: Leveraging Computational Tools --- From SQL And R To IPython Notebooks,  Up: Emacspeak At Twenty

16.13 Social Web -- EMail, Instant Messaging, Blogging And Tweeting Using Open Protocols
========================================================================================

The ability to process large amounts of email and electronic news has
always been a feature of Emacs.  I started using package *vm* for email
in 1990, along with *gnus* for Usenet access many years before
developing Emacspeak.  So these were the first major packages that
Emacspeak speech-enabled.  Being able to access the underlying data
structures used to visually render email messages and Usenet articles
enabled Emacspeak to produce rich, succinct auditory output -- this
vastly increased my ability to consume and organize large amounts of
information.  Toward the turn of the century, instant messaging arrived
in the mainstream -- package *tnt* provided an Emacs implementation of a
chat client that could communicate with users on the then popular AOL
Instant Messenger platform.  At the time, I worked at IBM Research, and
inspired by package *tnt*, I created an Emacs client called *ChatterBox*
using the Lotus Sametime API -- this enabled me to communicate with
colleagues at work from the comfort of Emacs.  Packages like *vm*,
*gnus*, *tnt* and *ChatterBox* provide an interesting example of how
availability of a clean underlying API to a specific service or content
stream can encourage the creation of efficient (and different) user
interfaces.  The touchstone of such successful implementations is a
simple test -- can the user of a specific interface tell if the person
whom he is communicating with is also using the same interface?  In each
of the examples enumerated above, a user at one end of the communication
chain cannot tell, and in fact shouldn't be able to tell what client the
user at the other end is using.  Contrast this with closed services that
have an inherent _lock-in_ model e.g., proprietary word processors that
use undocumented serialization formats -- for a fun read, see this
write-up on Universe Of Fancy Colored Paper
(http://emacspeak.sourceforge.net/publications/colored-paper.html).

   Today, my personal choice for instant messaging is the open Jabber
platform.  I connect to Jabber via Emacs package *emacs-jabber* and with
Emacspeak providing a light-weight wrapper for generating the eyes-free
interface, I can communicate seamlessly with colleagues and friends
around the world.

   As the Web evolved to encompass ever-increasing swathes of
communication functionality that had already been available on the
Internet, we saw the world move from Usenet groups to *Blogs* -- I
remember initially dismissing the blogging phenomenon as just a
re-invention of Usenet in the early days.  However, mainstream users
flocked to Blogging, and I later realized that blogging as a publishing
platform brought along interesting features that made communicating and
publishing information *much* easier.  In 2005, I joined Google; during
the winter holidays that year, I implemented a light-weight client for
Blogger that became the start of Emacs package *g-client* -- this
package provides Emacs wrappers for Google services that provide a
RESTful API.


File: emacspeak.info,  Node: The RESTful Web --- Web Wizards And URL Templates For Faster Access,  Next: Mashing It Up --- Leveraging Evolving Web APIs,  Prev: Social Web --- EMail Instant Messaging Blogging And Tweeting Using Open Protocols,  Up: Emacspeak At Twenty

16.14 The RESTful Web -- Web Wizards And URL Templates For Faster Access
========================================================================

Today, the Web, based on URLs and HTTP-style protocols is widely
recognized as a platform in its own right.  This platform emerged over
time -- to me, Web APIs arrived in the late 90's when I observed the
following with respect to my own behavior on many popular sites:

  1. I opened a Web page that took a while to load (remember, I was
     still using Emacs-W3),
  2. I then searched through the page to find a form-field that I filled
     out, e.g., start and end destinations on Yahoo Maps,
  3. I hit *submit*, and once again waited for a heavy-weight HTML page
     to load,
  4. And finally, I hunted through the rendered content to find what I
     was looking for.

   This pattern repeated across a wide-range of interactive Web sites
ranging from AltaVista for search (this was pre-Google), Yahoo Maps for
directions, and Amazon for product searches to name but a few.  So I
decided to automate away the pain by creating Emacspeak module
*emacspeak-websearch* that did the following:

  1. Prompt via the minibuffer for the requisite fields,
  2. Consed up an HTTP GET URL,
  3. Retrieved this URL,
  4. And filtered out the specific portion of the HTML DOM that held the
     generated response.

   Notice that the above implementation hard-wires the CGI parameter
names used by a given Web application into the code implemented in
module *emacspeak-websearch*.  REST as a design pattern had not yet been
recognized, leave alone formalized, and module *emacspeak-websearch* was
initially criticized as being fragile.

   However, over time, the CGI parameter names remained fixed -- the
only things that have required updating in the Emacspeak code-base are
the content filtering rules that extract the response -- for popular
services, this has averaged about one to two times a year.

   I later codified these filtering rules in terms of XPath, and also
integrated XSLT-based pre-processing of incoming HTML content before it
got handed off to Emacs-W3 -- and yes, Emacs/Advice once again came in
handy with respect to injecting XSLT pre-processing into Emacs-W3!

   Later, in early 2000, I created companion module
*emacspeak-url-templates* -- partially inspired by Emacs' *webjump*
module.  URL templates in Emacspeak leveraged the recognized REST
interaction pattern to provide a large collection of Web widgets that
could be quickly invoked to provide rapid access to the right pieces of
information on the Web.

   The final icing on the cake was the arrival of RSS and Atom feeds and
the consequent deep-linking into content-rich sites -- this meant that
Emacspeak could provide audio renderings of useful content without
having to deal with complex visual navigation!  While Google Reader
existed, Emacspeak provided a light-weight *greader* client for managing
ones feed subscriptions; with the demise of Google Reader, I implemented
module *emacspeak-feeds* for organizing feeds on the Emacspeak desktop.
A companion package *emacspeak-webspace* implements additional goodies
including a continuously updating ticker of headlines taken from the
user's collection of subscribed feeds.


File: emacspeak.info,  Node: Mashing It Up --- Leveraging Evolving Web APIs,  Next: Conclusion --- Turning Twenty,  Prev: The RESTful Web --- Web Wizards And URL Templates For Faster Access,  Up: Emacspeak At Twenty

16.15 Mashing It Up -- Leveraging Evolving Web APIs
===================================================

The next step in this evolution came with the arrival of richer Web APIs
-- especially ones that defined a clean client/server separation.  In
this respect, the world of Web APIs is a somewhat mixed bag in that many
Web sites equate a Web API with a JS-based API that can be exclusively
invoked from within a Web-Browser run-time.  The issue with that type of
API binding is that the only runtime that is supported is a full-blown
Web browser; but the arrival of native mobile apps has actually proven a
net positive in encouraging sites to create a cleaner separation.
Emacspeak has leveraged these APIs to create Emacspeak front-ends to
many useful services, here are a few:

  1. Minibuffer completion for Google Search using Google Suggest to
     provide completions.
  2. Librivox for browsing and playing free audio books.
  3. NPR for browsing and playing NPR archived programs.
  4. BBC for playing a wide variety of streaming content available from
     the BBC.
  5. A Google Maps front-end that provides instantaneous access to
     directions and Places search.
  6. Access to Twitter via package *twittering-mode*.

   And a lot more than will fit this margin!  This is an example of
generalizing the concept of a mashup as seen on the Web with respect to
creating hybrid applications by bringing together a collection of
different Web APIs.  Another way to think of such separation is to view
an application as a *head* and a *body* -- where the *head* is a
specific user interface, with the *body* implementing the application
logic.  A cleanly defined separation between the *head* and *body*
allows one to attach _different_ user interfaces i.e., *heads* to the
given *body* without any loss of functionality, or the need to
re-implement the entire application.  Modern platforms like Android
enable such separation via an Intent
(http://developer.android.com/reference/android/content/Intent.html)
mechanism.  The Web platform as originally defined around URLs is
actually well-suited to this type of separation -- though the full
potential of this design pattern remains to be fully realized given
today's tight association of the Web to the Web Browser.


File: emacspeak.info,  Node: Conclusion --- Turning Twenty,  Next: References,  Prev: Mashing It Up --- Leveraging Evolving Web APIs,  Up: Emacspeak At Twenty

16.16 Conclusion -- Turning Twenty
==================================

In 1996, I wrote an article entitled User Interface -- A Means To An End
(http://www.drdobbs.com/user-interface-a-means-to-an-end/184410453)
pointing out that the size and shape of computers were determined by the
keyboard and display.  This is even more true in today's world of
tablets, phablets and large-sized phones -- with the only difference
that the keyboard has been replaced by a touch screen.  The next
generation in the evolution of *personal* devices is that they will
become truly personal by being wearables -- this once again forces a
separation of the user interface peripherals from the underlying compute
engine.  Imagine a variety of wearables that collectively connect to
ones cell phone, which itself connects to the cloud for all its
computational and information needs.  Such an environment is rich in
possibilities for creating a wide variety of user experiences to a
single underlying body of information; Eyes-Free interfaces as pioneered
by systems like Emacspeak will come to play an increasingly vital role
alongside visual interaction when this comes to pass.

   -T.V. Raman, San Jose, CA, September 12, 2014


File: emacspeak.info,  Node: References,  Prev: Conclusion --- Turning Twenty,  Up: Emacspeak At Twenty

16.17 References
================

   • Auditory User Interfaces
     (http://emacspeak.sourceforge.net/raman/aui/aui.html) Klewer
     Publishing, 1997.
   • Advice An Emacs Lisp package by Hans Chalupsky
     (http://www.isi.edu/~hans/) that became part of Emacs 19.23.
   • Beautiful Code
     (http://emacspeak.blogspot.com/2007/07/emacspeak-and-beautiful-code.html)
     An overview of the Emacspeak architecture.
   • Speech-Enabled Applications
     (http://emacspeak.sourceforge.net/raman/publications/chi96-emacspeak/)
     Emacspeak at CHI 1996.
   • EWW Emacspeak extends EWW
     (http://emacspeak.blogspot.com/2014/05/emacspeak-eww-updates-for-complete.html).
   • In The Beginning Was The Command Line
     (http://artlung.com/smorgasborg/C_R_Y_P_T_O_N_O_M_I_C_O_N.shtml) By
     Neal Stephenson


File: emacspeak.info,  Node: Acknowledgments,  Next: Concept Index,  Prev: Emacspeak At Twenty,  Up: Top

17 Acknowledgments
******************

Thanks.


File: emacspeak.info,  Node: Concept Index,  Next: Key Index,  Prev: Acknowledgments,  Up: Top

18 Concept Index
****************

 [index ]
* Menu:

* AUCTeX:                                Creating Well-formatted Documents.
                                                               (line 42)
* Audio Desktop:                         Audio Desktop.        (line  6)
* Audio Formatting:                      Context-Sensitive Interaction.
                                                               (line 24)
* Browsing Structure:                    Browsing Structure.   (line  6)
* character echo:                        Controlling Echo.     (line  6)
* Context-Sensitive Interaction:         Context-Sensitive Interaction.
                                                               (line  6)
* Desktop:                               Desktop Management.   (line  6)
* Desktop Applications:                  Desktop Applications. (line  5)
* Desktop Navigation:                    Context-Sensitive Interaction.
                                                               (line 54)
* Desktop Objects:                       Desktop Objects.      (line  6)
* Document Authoring:                    Document Authoring.   (line  6)
* Document Creation:                     Creating Well-formatted Documents.
                                                               (line  6)
* Emacs Keyboard Commands:               Emacspeak Keyboard Commands.
                                                               (line  6)
* Emacs Packages:                        Emacs Packages.       (line  6)
* Finding:                               Context-Sensitive Interaction.
                                                               (line 64)
* Introduction:                          Introduction.         (line  6)
* line echo:                             Controlling Echo.     (line  6)
* Messaging:                             Messaging.            (line  6)
* Object-Oriented Desktop:               Object Oriented Desktop.
                                                               (line  6)
* Online Help:                           Using Online Help.    (line  6)
* Personal Information Management:       Personal Information Management.
                                                               (line  6)
* Programming:                           Editing Code.         (line  6)
* Replace:                               Search replace and spell check.
                                                               (line  6)
* Search:                                Search replace and spell check.
                                                               (line  6)
* Searching:                             Context-Sensitive Interaction.
                                                               (line 64)
* Software Development:                  Development Environment.
                                                               (line  6)
* speech settings:                       Speech System.        (line  6)
* speech system:                         Speech System.        (line  6)
* Spell Check:                           Search replace and spell check.
                                                               (line 52)
* Structured Navigation:                 Context-Sensitive Interaction.
                                                               (line 34)
* TTS:                                   Speech System.        (line  6)
* Web Browsing:                          Web Browsing.         (line  6)
* word echo:                             Controlling Echo.     (line  6)


File: emacspeak.info,  Node: Key Index,  Prev: Concept Index,  Up: Top

19 Key Index
************

 [index ]
* Menu:

* <f1> ,:                                emacspeak-wizards.  (line  327)
* <f1> ":                                emacspeak-extras.   (line  105)
* <f1> \:                                emacspeak-wizards.  (line  337)
* <f1> =:                                emacspeak-wizards.  (line  927)
* <f1> C-e:                              emacspeak-wizards.  (line   53)
* <f1> C-l:                              emacspeak-wizards.  (line   72)
* <f1> C-s:                              emacspeak-wizards.  (line  397)
* <f1> C-v:                              emacspeak-wizards.  (line  410)
* <f1> M:                                emacspeak-wizards.  (line  211)
* <f1> N:                                emacspeak-speak.    (line 1055)
* <f1> TAB:                              emacspeak-info.     (line   38)
* <fn>:                                  dtk-speak.          (line  226)
* <help> ,:                              emacspeak-wizards.  (line  328)
* <help> ":                              emacspeak-extras.   (line  106)
* <help> \:                              emacspeak-wizards.  (line  338)
* <help> =:                              emacspeak-wizards.  (line  928)
* <help> C-e:                            emacspeak-wizards.  (line   54)
* <help> C-l:                            emacspeak-wizards.  (line   73)
* <help> C-s:                            emacspeak-wizards.  (line  398)
* <help> C-v:                            emacspeak-wizards.  (line  411)
* <help> M:                              emacspeak-wizards.  (line  212)
* <help> N:                              emacspeak-speak.    (line 1056)
* <help> TAB:                            emacspeak-info.     (line   39)
* <print>:                               emacspeak-muggles.  (line   49)
* <silence>:                             emacspeak-speak.    (line  222)
* <XF86AudioLowerVolume>:                amixer.             (line   63)
* <XF86AudioPlay>:                       emacspeak-speak.    (line  223)
* <XF86AudioRaiseVolume>:                amixer.             (line   75)
* C-, /:                                 extra-muggles.      (line  331)
* C-, a:                                 emacspeak-feeds.    (line   34)
* C-, h:                                 emacspeak-muggles.  (line   75)
* C-, o:                                 emacspeak-feeds.    (line   73)
* C-, p:                                 emacspeak-wizards.  (line  743)
* C-, q:                                 emacspeak-wizards.  (line  762)
* C-, r:                                 emacspeak-feeds.    (line   92)
* C-, s:                                 emacspeak-wizards.  (line  978)
* C-, SPC:                               emacspeak-eww.      (line  924)
* C-, t:                                 emacspeak-wizards.  (line  966)
* C-, u:                                 emacspeak-m-player. (line  720)
* C-; a:                                 emacspeak-amark.    (line   51)
* C-; b:                                 emacspeak-wizards.  (line  304)
* C-; C-;:                               emacspeak-amark.    (line   36)
* C-; C-l:                               emacspeak-librivox. (line   32)
* C-; C-t:                               emacspeak-extras.   (line  130)
* C-; DEL:                               emacspeak-wizards.  (line  895)
* C-; h:                                 emacspeak-m-player. (line  331)
* C-; j:                                 emacspeak-comint.   (line   45)
* C-; l:                                 emacspeak-m-player. (line  365)
* C-; r:                                 emacspeak-wizards.  (line  532)
* C-; w:                                 emacspeak-wizards.  (line  711)
* C-. .:                                 emacspeak-wizards.  (line  837)
* C-. C-n:                               emacspeak-wizards.  (line  602)
* C-. d:                                 emacspeak-dired.    (line   25)
* C-. g l:                               emacspeak-google.   (line   90)
* C-. g n:                               emacspeak-google.   (line  102)
* C-. g p:                               emacspeak-google.   (line  112)
* C-. g r:                               emacspeak-google.   (line  122)
* C-. g s:                               emacspeak-google.   (line  133)
* C-. h:                                 emacspeak-org.      (line   27)
* C-. l:                                 emacspeak-wizards.  (line  642)
* C-. m:                                 emacspeak-wizards.  (line 1042)
* C-. n:                                 emacspeak-wizards.  (line  611)
* C-. o:                                 extra-muggles.      (line  190)
* C-. R:                                 emacspeak-webspace. (line   16)
* C-. v:                                 extra-muggles.      (line  271)
* C-' ':                                 emacspeak-pianobar. (line   45)
* C-' y:                                 emacspeak-google.   (line  161)
* C-/:                                   emacspeak-muggles.  (line  206)
* C-<f1>:                                amixer.             (line   64)
* C-<f2>:                                amixer.             (line   76)
* C-c ,:                                 extra-muggles.      (line  230)
* C-c (:                                 Running Terminal Based Applications.
                                                             (line   96)
* C-c ):                                 Running Terminal Based Applications.
                                                             (line  105)
* C-c 0:                                 Running Terminal Based Applications.
                                                             (line   68)
* C-c 1:                                 Running Terminal Based Applications.
                                                             (line   86)
* C-c C-\:                               Running Terminal Based Applications.
                                                             (line  149)
* C-c C-a:                               Running Terminal Based Applications.
                                                             (line  165)
* C-c C-c:                               Running Terminal Based Applications.
                                                             (line   91)
* C-c C-c <1>:                           Running Terminal Based Applications.
                                                             (line  153)
* C-c C-d:                               Running Terminal Based Applications.
                                                             (line   80)
* C-c C-d <1>:                           Running Terminal Based Applications.
                                                             (line  171)
* C-c C-f:                               Running Terminal Based Applications.
                                                             (line   63)
* C-c C-j:                               Running Terminal Based Applications.
                                                             (line   52)
* C-c C-k:                               Running Terminal Based Applications.
                                                             (line  135)
* C-c C-u:                               Running Terminal Based Applications.
                                                             (line  161)
* C-c C-w:                               Running Terminal Based Applications.
                                                             (line  157)
* C-c C-x C-c:                           Running Terminal Based Applications.
                                                             (line   76)
* C-c C-z:                               Running Terminal Based Applications.
                                                             (line  139)
* C-c e:                                 Running Terminal Based Applications.
                                                             (line  112)
* C-c k:                                 Running Terminal Based Applications.
                                                             (line   72)
* C-c o:                                 emacspeak-muggles.  (line  185)
* C-c o <1>:                             Running Terminal Based Applications.
                                                             (line   56)
* C-e cap M:                             Status Information. (line   18)
* C-e cap R:                             Reading.            (line   69)
* C-e ,:                                 emacspeak-speak.    (line   38)
* C-e ;:                                 emacspeak-m-player. (line  786)
* C-e !:                                 emacspeak-speak.    (line  765)
* C-e ?:                                 emacspeak-websearch.
                                                             (line   52)
* C-e .:                                 emacspeak-speak.    (line   37)
* C-e ':                                 emacspeak-empv.     (line   48)
* C-e ":                                 emacspeak-empv.     (line   59)
* C-e (:                                 amixer.             (line   25)
* C-e ):                                 emacspeak-sounds.   (line   43)
* C-e [:                                 Reading.            (line  121)
* C-e [ <1>:                             emacspeak-speak.    (line  670)
* C-e ]:                                 emacspeak-speak.    (line  648)
* C-e @:                                 emacspeak-speak.    (line  551)
* C-e /:                                 Reading.            (line   91)
* C-e / <1>:                             emacspeak-websearch.
                                                             (line   53)
* C-e \:                                 emacspeak-speak.    (line 1026)
* C-e &:                                 emacspeak-wizards.  (line  826)
* C-e # a:                               emacspeak-gridtext. (line   27)
* C-e # l:                               emacspeak-gridtext. (line   37)
* C-e # s:                               emacspeak-gridtext. (line   47)
* C-e %:                                 Status Information. (line   92)
* C-e % <1>:                             emacspeak-speak.    (line  359)
* C-e `:                                 emacspeak-speak.    (line  605)
* C-e ^:                                 emacspeak-filtertext.
                                                             (line   24)
* C-e <down>:                            emacspeak-speak.    (line  178)
* C-e <f1>:                              emacspeak-wizards.  (line   70)
* C-e <f11>:                             emacspeak-wizards.  (line  860)
* C-e <fn>:                              emacspeak-speak.    (line  233)
* C-e <left>:                            emacspeak-wizards.  (line  257)
* C-e <right>:                           emacspeak-wizards.  (line  231)
* C-e <up>:                              emacspeak-speak.    (line  189)
* C-e =:                                 Status Information. (line   87)
* C-e = <1>:                             emacspeak-speak.    (line  319)
* C-e |:                                 emacspeak-speak.    (line  493)
* C-e 1:                                 emacspeak-speak.    (line  846)
* C-e 2:                                 emacspeak-speak.    (line  632)
* C-e 3:                                 amixer.             (line   53)
* C-e 4:                                 amixer.             (line   52)
* C-e a:                                 Status Information. (line    8)
* C-e A:                                 emacspeak-calendar. (line   18)
* C-e a <1>:                             emacspeak-speak.    (line  540)
* C-e b:                                 Reading.            (line   76)
* C-e b <1>:                             emacspeak-speak.    (line  241)
* C-e B:                                 emacspeak-speak.    (line  267)
* C-e c:                                 Reading.            (line   15)
* C-e c <1>:                             emacspeak-speak.    (line  278)
* C-e C:                                 emacspeak-wizards.  (line   44)
* C-e C-.:                               emacspeak-speak.    (line  405)
* C-e C-':                               emacspeak-pianobar. (line   44)
* C-e C-@:                               Status Information. (line   71)
* C-e C-@ <1>:                           emacspeak-speak.    (line  343)
* C-e C-/:                               emacspeak-wizards.  (line  242)
* C-e C-<left>:                          emacspeak-wizards.  (line  139)
* C-e C-<return>:                        emacspeak-speak.    (line  306)
* C-e C-<right>:                         emacspeak-wizards.  (line  114)
* C-e C-a:                               emacspeak-sounds.   (line   53)
* C-e C-b:                               emacspeak-bookshare.
                                                             (line   53)
* C-e C-d:                               emacspeak-speak.    (line 1015)
* C-e C-f:                               emacspeak-dired.    (line  165)
* C-e C-j:                               emacspeak-hide.     (line   39)
* C-e C-l:                               Status Information. (line   82)
* C-e C-M-c:                             emacspeak-extras.   (line   28)
* C-e C-M-q:                             emacspeak-speak.    (line 1036)
* C-e C-M-SPC:                           emacspeak-speak.    (line  831)
* C-e C-n:                               Reading.            (line  138)
* C-e C-o:                               emacspeak-ocr.      (line   18)
* C-e C-p:                               Reading.            (line  143)
* C-e C-q:                               emacspeak-comint.   (line   35)
* C-e C-s:                               Miscellaneous.      (line   26)
* C-e C-s <1>:                           dtk-speak.          (line  332)
* C-e C-SPC:                             emacspeak-speak.    (line  342)
* C-e C-t ,:                             emacspeak-table-ui. (line   61)
* C-e C-t .:                             emacspeak-table-ui. (line  406)
* C-e C-t #:                             emacspeak-table-ui. (line  371)
* C-e C-t <:                             emacspeak-table-ui. (line  108)
* C-e C-t <down>:                        emacspeak-table-ui. (line  280)
* C-e C-t <left>:                        emacspeak-table-ui. (line  300)
* C-e C-t <right>:                       emacspeak-table-ui. (line  268)
* C-e C-t <up>:                          emacspeak-table-ui. (line  313)
* C-e C-t =:                             emacspeak-table-ui. (line  422)
* C-e C-t >:                             emacspeak-table-ui. (line  117)
* C-e C-t A:                             emacspeak-table-ui. (line  107)
* C-e C-t a:                             emacspeak-table-ui. (line  362)
* C-e C-t B:                             emacspeak-table-ui. (line   98)
* C-e C-t b:                             emacspeak-table-ui. (line  379)
* C-e C-t C:                             emacspeak-table-ui. (line  336)
* C-e C-t c:                             emacspeak-table-ui. (line  398)
* C-e C-t C-b:                           emacspeak-table-ui. (line  299)
* C-e C-t C-f:                           emacspeak-table-ui. (line  267)
* C-e C-t C-n:                           emacspeak-table-ui. (line  279)
* C-e C-t C-p:                           emacspeak-table-ui. (line  312)
* C-e C-t E:                             emacspeak-table-ui. (line  116)
* C-e C-t f:                             emacspeak-table-ui. (line  430)
* C-e C-t g:                             emacspeak-table-ui. (line  387)
* C-e C-t h:                             emacspeak-table-ui. (line  344)
* C-e C-t j:                             emacspeak-table-ui. (line   88)
* C-e C-t k:                             emacspeak-table-ui. (line   34)
* C-e C-t M-<:                           emacspeak-table-ui. (line  126)
* C-e C-t M->:                           emacspeak-table-ui. (line   99)
* C-e C-t M-l:                           emacspeak-table-ui. (line  449)
* C-e C-t M-s:                           emacspeak-table-ui. (line  459)
* C-e C-t n:                             emacspeak-table-ui. (line  278)
* C-e C-t p:                             emacspeak-table-ui. (line  311)
* C-e C-t Q:                             emacspeak-wizards.  (line   62)
* C-e C-t R:                             emacspeak-table-ui. (line  354)
* C-e C-t r:                             emacspeak-table-ui. (line  441)
* C-e C-t s:                             emacspeak-table-ui. (line  323)
* C-e C-t S-<tab>:                       emacspeak-table-ui. (line  301)
* C-e C-t SPC:                           emacspeak-table-ui. (line  414)
* C-e C-t T:                             emacspeak-table-ui. (line  125)
* C-e C-t TAB:                           emacspeak-table-ui. (line  266)
* C-e C-t v:                             emacspeak-table-ui. (line  469)
* C-e C-t w:                             emacspeak-table-ui. (line   16)
* C-e C-t x:                             emacspeak-table-ui. (line   24)
* C-e C-u:                               emacspeak-feeds.    (line   53)
* C-e C-w:                               Status Information. (line   28)
* C-e C-w <1>:                           emacspeak-speak.    (line  905)
* C-e C-x:                               emacspeak-speak.    (line  427)
* C-e cap V:                             Status Information. (line   38)
* C-e d cap V:                           Miscellaneous.      (line   84)
* C-e d -:                               dtk-speak.          (line   65)
* C-e d ,:                               dtk-speak.          (line  248)
* C-e d .:                               dtk-speak.          (line   57)
* C-e d +:                               dtk-speak.          (line   66)
* C-e d =:                               dtk-speak.          (line   67)
* C-e d 0:                               dtk-speak.          (line  151)
* C-e d 1:                               dtk-speak.          (line  150)
* C-e d 2:                               dtk-speak.          (line  149)
* C-e d 3:                               dtk-speak.          (line  148)
* C-e d 4:                               dtk-speak.          (line  147)
* C-e d 5:                               dtk-speak.          (line  146)
* C-e d 6:                               dtk-speak.          (line  145)
* C-e d 7:                               dtk-speak.          (line  144)
* C-e d 8:                               dtk-speak.          (line  143)
* C-e d 9:                               dtk-speak.          (line  142)
* C-e d a:                               Miscellaneous.      (line   36)
* C-e d a <1>:                           dtk-speak.          (line   16)
* C-e d c:                               Speech Output Control.
                                                             (line   66)
* C-e d c <1>:                           dtk-speak.          (line  238)
* C-e d C-c:                             dtk-speak.          (line   28)
* C-e d C-d:                             dectalk-voices.     (line   17)
* C-e d C-e:                             espeak-voices.      (line   17)
* C-e d C-j:                             dtk-speak.          (line  111)
* C-e d C-n:                             dtk-speak.          (line   49)
* C-e d C-o:                             outloud-voices.     (line   17)
* C-e d C-s:                             dectalk-voices.     (line   25)
* C-e d d:                               Miscellaneous.      (line   48)
* C-e d d <1>:                           dtk-speak.          (line   86)
* C-e d DIGIT:                           Speech Output Control.
                                                             (line   36)
* C-e d f:                               Speech Output Control.
                                                             (line   23)
* C-e d f <1>:                           dtk-speak.          (line   97)
* C-e d i:                               Speech Output Control.
                                                             (line   77)
* C-e d i <1>:                           emacspeak-speak.    (line  962)
* C-e d k:                               Controlling Echo.   (line   18)
* C-e d k <1>:                           emacspeak-speak.    (line  976)
* C-e d l:                               Controlling Echo.   (line   32)
* C-e d L:                               dtk-speak.          (line   36)
* C-e d l <1>:                           emacspeak-speak.    (line  993)
* C-e d m:                               Speech Output Control.
                                                             (line   50)
* C-e d N:                               dtk-speak.          (line  134)
* C-e d n:                               dtk-speak.          (line  269)
* C-e d o:                               dtk-speak.          (line  299)
* C-e d p:                               Speech Output Control.
                                                             (line   43)
* C-e d P:                               dtk-speak.          (line  173)
* C-e d p <1>:                           dtk-speak.          (line  181)
* C-e d q:                               Miscellaneous.      (line   17)
* C-e d q <1>:                           dtk-speak.          (line  259)
* C-e d r:                               Speech Output Control.
                                                             (line   16)
* C-e d R:                               dtk-speak.          (line   78)
* C-e d r <1>:                           dtk-speak.          (line  214)
* C-e d <RETURN>:                        Miscellaneous.      (line   71)
* C-e d s:                               Speech Output Control.
                                                             (line   58)
* C-e d S:                               dtk-speak.          (line  122)
* C-e d s <1>:                           dtk-speak.          (line  279)
* C-e d <SPACE>:                         Miscellaneous.      (line   55)
* C-e d SPC:                             dtk-speak.          (line  291)
* C-e d t:                               Miscellaneous.      (line   79)
* C-e d V:                               dtk-speak.          (line  340)
* C-e d v:                               voice-setup.        (line   63)
* C-e d w:                               Controlling Echo.   (line   25)
* C-e d w <1>:                           emacspeak-speak.    (line 1044)
* C-e d z:                               Miscellaneous.      (line   90)
* C-e d z <1>:                           emacspeak-speak.    (line 1064)
* C-e DIGIT:                             Reading.            (line  129)
* C-e <DOWN>:                            Reading.            (line   49)
* C-e f:                                 Status Information. (line   43)
* C-e f <1>:                             emacspeak-speak.    (line  253)
* C-e g:                                 emacspeak-epub.     (line  143)
* C-e h:                                 Status Information. (line   50)
* C-e h <1>:                             emacspeak-speak.    (line  435)
* C-e i:                                 emacspeak-speak.    (line  756)
* C-e j:                                 emacspeak-hide.     (line   27)
* C-e k:                                 Status Information. (line   57)
* C-e k <1>:                             emacspeak-speak.    (line  327)
* C-e l:                                 Reading.            (line   29)
* C-e l <1>:                             emacspeak-speak.    (line  457)
* C-e L:                                 emacspeak-speak.    (line  482)
* C-e <LEFT>:                            Reading.            (line  105)
* C-e m:                                 Status Information. (line   13)
* C-e M:                                 emacspeak-speak.    (line  581)
* C-e m <1>:                             emacspeak-speak.    (line  593)
* C-e M-;:                               emacspeak-eww.      (line  688)
* C-e M-%:                               emacspeak-speak.    (line  103)
* C-e M-b:                               emacspeak-speak.    (line  621)
* C-e M-c:                               emacspeak-wizards.  (line   30)
* C-e M-d:                               emacspeak-pronounce.
                                                             (line   67)
* C-e M-e:                               emacspeak-speak.    (line  385)
* C-e M-h:                               emacspeak-wizards.  (line  202)
* C-e M-i:                               emacspeak-table-ui. (line   43)
* C-e M-l:                               emacspeak-speak.    (line  640)
* C-e M-m:                               emacspeak-speak.    (line 1003)
* C-e M-o:                               emacspeak-comint.   (line   26)
* C-e M-p:                               emacspeak-wizards.  (line  150)
* C-e M-s:                               emacspeak-wizards.  (line  268)
* C-e M-SPC:                             emacspeak-speak.    (line  298)
* C-e M-t:                               emacspeak-speak.    (line   82)
* C-e M-u:                               emacspeak-feeds.    (line   16)
* C-e M-v:                               emacspeak-wizards.  (line  161)
* C-e M-w:                               emacspeak-speak.    (line  896)
* C-e meta C-@:                          Reading.            (line  183)
* C-e n:                                 Reading.            (line   86)
* C-e n <1>:                             emacspeak-speak.    (line   36)
* C-e N:                                 emacspeak-wizards.  (line  281)
* C-e p:                                 Reading.            (line   55)
* C-e p <1>:                             emacspeak-speak.    (line   35)
* C-e P:                                 emacspeak-speak.    (line  682)
* C-e r:                                 Reading.            (line   63)
* C-e R:                                 emacspeak-speak.    (line  734)
* C-e r <1>:                             emacspeak-speak.    (line  746)
* C-e RET:                               emacspeak-websearch.
                                                             (line   72)
* C-e <RIGHT>:                           Reading.            (line  113)
* C-e s:                                 Miscellaneous.      (line   12)
* C-e s <1>:                             dtk-speak.          (line  227)
* C-e SPC:                               Status Information. (line   23)
* C-e SPC <1>:                           emacspeak-speak.    (line  913)
* C-e t:                                 Status Information. (line   33)
* C-e t <1>:                             emacspeak-speak.    (line  854)
* C-e T:                                 emacspeak-wizards.  (line  289)
* C-e TAB:                               emacspeak-speak.    (line  123)
* C-e u:                                 emacspeak-url-template.
                                                             (line   20)
* C-e <UP>:                              Reading.            (line   43)
* C-e v:                                 Status Information. (line   66)
* C-e V:                                 emacspeak-speak.    (line  868)
* C-e w:                                 Reading.            (line   21)
* C-e W:                                 emacspeak-speak.    (line  200)
* C-e w <1>:                             emacspeak-speak.    (line  921)
* C-e x ,:                               emacspeak-wizards.  (line  852)
* C-e x ;:                               emacspeak-m-player. (line  656)
* C-e x ::                               emacspeak-m-player. (line  380)
* C-e x .:                               emacspeak-wizards.  (line  838)
* C-e x =:                               emacspeak-wizards.  (line  544)
* C-e x |:                               emacspeak-wizards.  (line  916)
* C-e x 0:                               emacspeak-wizards.  (line  808)
* C-e x 1:                               emacspeak-wizards.  (line  807)
* C-e x 2:                               emacspeak-wizards.  (line  806)
* C-e x 3:                               emacspeak-wizards.  (line  805)
* C-e x 4:                               emacspeak-wizards.  (line  804)
* C-e x 5:                               emacspeak-wizards.  (line  803)
* C-e x 7:                               emacspeak-wizards.  (line  827)
* C-e x C-c:                             emacspeak-wizards.  (line  349)
* C-e x d:                               emacspeak-speak.    (line  512)
* C-e x e ]:                             emacspeak-we.       (line  317)
* C-e x e a:                             emacspeak-we.       (line  370)
* C-e x e b:                             emacspeak-we.       (line  246)
* C-e x e c:                             emacspeak-we.       (line   77)
* C-e x e C:                             emacspeak-we.       (line   90)
* C-e x e C-c:                           emacspeak-we.       (line  273)
* C-e x e C-f:                           emacspeak-we.       (line   47)
* C-e x e C-p:                           emacspeak-we.       (line  348)
* C-e x e C-t:                           emacspeak-we.       (line   67)
* C-e x e C-x:                           emacspeak-we.       (line   57)
* C-e x e d:                             emacspeak-we.       (line  259)
* C-e x e D:                             emacspeak-we.       (line  272)
* C-e x e e:                             emacspeak-we.       (line  307)
* C-e x e f:                             emacspeak-we.       (line  380)
* C-e x e i:                             emacspeak-we.       (line  103)
* C-e x e I:                             emacspeak-we.       (line  116)
* C-e x e j:                             emacspeak-we.       (line  391)
* C-e x e k:                             emacspeak-we.       (line  299)
* C-e x e m:                             emacspeak-we.       (line  187)
* C-e x e M:                             emacspeak-we.       (line  211)
* C-e x e o:                             emacspeak-we.       (line  362)
* C-e x e P:                             emacspeak-we.       (line  236)
* C-e x e p:                             emacspeak-we.       (line  335)
* C-e x e r:                             emacspeak-we.       (line  128)
* C-e x e S:                             emacspeak-we.       (line  286)
* C-e x e s:                             emacspeak-we.       (line  401)
* C-e x e t:                             emacspeak-we.       (line  199)
* C-e x e T:                             emacspeak-we.       (line  224)
* C-e x e u:                             emacspeak-we.       (line  141)
* C-e x e v:                             emacspeak-we.       (line   34)
* C-e x e x:                             emacspeak-we.       (line  152)
* C-e x e X:                             emacspeak-we.       (line  166)
* C-e x e y:                             emacspeak-we.       (line   20)
* C-e x e z:                             emacspeak-we.       (line  176)
* C-e x f:                               emacspeak-wizards.  (line  771)
* C-e x h:                               emacspeak-wizards.  (line  621)
* C-e x M-c:                             emacspeak-wizards.  (line  371)
* C-e x o:                               emacspeak-wizards.  (line  729)
* C-e x t:                               emacspeak-wizards.  (line  220)
* C-e x u:                               emacspeak-wizards.  (line  987)
* C-e x v:                               emacspeak-wizards.  (line 1017)
* C-e x w:                               emacspeak-wizards.  (line  712)
* C-e y a:                               emacspeak-xslt.     (line   27)
* C-e y p:                               emacspeak-pianobar. (line   46)
* C-e y r:                               emacspeak-xslt.     (line   57)
* C-e y x:                               emacspeak-xslt.     (line   37)
* C-e y y:                               emacspeak-empv.     (line   69)
* C-e z b:                               emacspeak-wizards.  (line 1043)
* C-e z e:                               emacspeak-wizards.  (line  508)
* C-e z l:                               emacspeak-m-player. (line  366)
* C-h ,:                                 emacspeak-wizards.  (line  326)
* C-h ":                                 emacspeak-extras.   (line  104)
* C-h \:                                 emacspeak-wizards.  (line  336)
* C-h =:                                 emacspeak-wizards.  (line  926)
* C-h C-e:                               emacspeak-wizards.  (line   52)
* C-h C-l:                               emacspeak-wizards.  (line   71)
* C-h C-s:                               emacspeak-wizards.  (line  396)
* C-h C-v:                               emacspeak-wizards.  (line  409)
* C-h M:                                 emacspeak-wizards.  (line  210)
* C-h N:                                 emacspeak-speak.    (line 1054)
* C-h TAB:                               emacspeak-info.     (line   37)
* C-M-y:                                 emacspeak-muggles.  (line   97)
* C-x @ a /:                             extra-muggles.      (line  332)
* C-x @ a a:                             emacspeak-feeds.    (line   35)
* C-x @ a h:                             emacspeak-muggles.  (line   76)
* C-x @ a o:                             emacspeak-feeds.    (line   74)
* C-x @ a p:                             emacspeak-wizards.  (line  744)
* C-x @ a q:                             emacspeak-wizards.  (line  763)
* C-x @ a r:                             emacspeak-feeds.    (line   93)
* C-x @ a s:                             emacspeak-wizards.  (line  979)
* C-x @ a SPC:                           emacspeak-eww.      (line  925)
* C-x @ a t:                             emacspeak-wizards.  (line  967)
* C-x @ a u:                             emacspeak-m-player. (line  721)
* C-x @ h a:                             emacspeak-amark.    (line   52)
* C-x @ h b:                             emacspeak-wizards.  (line  305)
* C-x @ h C-;:                           emacspeak-amark.    (line   37)
* C-x @ h C-l:                           emacspeak-librivox. (line   33)
* C-x @ h C-t:                           emacspeak-extras.   (line  131)
* C-x @ h DEL:                           emacspeak-wizards.  (line  896)
* C-x @ h h:                             emacspeak-m-player. (line  332)
* C-x @ h j:                             emacspeak-comint.   (line   46)
* C-x @ h l:                             emacspeak-m-player. (line  367)
* C-x @ h r:                             emacspeak-wizards.  (line  533)
* C-x @ h w:                             emacspeak-wizards.  (line  713)
* C-x @ s .:                             emacspeak-wizards.  (line  839)
* C-x @ s C-n:                           emacspeak-wizards.  (line  603)
* C-x @ s d:                             emacspeak-dired.    (line   26)
* C-x @ s g l:                           emacspeak-google.   (line   91)
* C-x @ s g n:                           emacspeak-google.   (line  103)
* C-x @ s g p:                           emacspeak-google.   (line  113)
* C-x @ s g r:                           emacspeak-google.   (line  123)
* C-x @ s g s:                           emacspeak-google.   (line  134)
* C-x @ s h:                             emacspeak-org.      (line   28)
* C-x @ s l:                             emacspeak-wizards.  (line  643)
* C-x @ s m:                             emacspeak-wizards.  (line 1044)
* C-x @ s n:                             emacspeak-wizards.  (line  612)
* C-x @ s o:                             extra-muggles.      (line  191)
* C-x @ s R:                             emacspeak-webspace. (line   17)
* C-x @ s v:                             extra-muggles.      (line  272)
* C-x r C-e:                             emacspeak-eww.      (line  427)
* C-x r e:                               emacspeak-eww.      (line  677)
* C-z b:                                 emacspeak-wizards.  (line 1041)
* C-z e:                                 emacspeak-wizards.  (line  507)
* C-z l:                                 emacspeak-m-player. (line  364)
* ESC <down>:                            emacspeak-speak.    (line  131)
* ESC <next>:                            emacspeak-speak.    (line  162)
* ESC <prior>:                           emacspeak-speak.    (line  153)
* ESC <up>:                              emacspeak-speak.    (line  142)
* <ESCAPE> <DOWN>:                       Reading.            (line  160)
* <ESCAPE> next:                         Reading.            (line  166)
* <ESCAPE> prior:                        Reading.            (line  172)
* <ESCAPE> <UP>:                         Reading.            (line  154)
* M-ESC ::                               emacspeak-wizards.  (line  869)
* s-;:                                   extra-muggles.      (line  113)
* s-.:                                   emacspeak-muggles.  (line   48)
* s-':                                   extra-muggles.      (line  222)
* S-<down>:                              emacspeak-wizards.  (line  177)
* S-<left>:                              emacspeak-wizards.  (line  186)
* S-<right>:                             emacspeak-wizards.  (line  194)
* S-<up>:                                emacspeak-wizards.  (line  169)
* s-m:                                   extra-muggles.      (line   53)
* s-n:                                   emacspeak-muggles.  (line  135)
* s-o:                                   emacspeak.          (line   20)
* s-SPC:                                 emacspeak-muggles.  (line  112)

